//请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
//路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
//如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。 
//例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，
//但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，
//路径不能再次进入该格子。


class Solution {
public:
    bool isPath(vector<char> flags,char* matrix,int rows,int cols,char* str,int i,int j){
        if(i<0 || i>=rows || j<0 || j>=cols)
            return false;
        if(matrix[i*cols+j]==*str && flags[i*cols+j]==0){
            flags[i*cols+j]=1;
            if(*(str+1)==0)
                return true;
            bool condition = isPath(flags,matrix,rows,cols,str+1,i-1,j)
                || isPath(flags,matrix,rows,cols,str+1,i+1,j)
                || isPath(flags,matrix,rows,cols,str+1,i,j-1)
                || isPath(flags,matrix,rows,cols,str+1,i,j+1);
            if(condition == false)
                flags[i*cols+j]=0;
            return condition;
        }
        else
            return false;
    }
    
    
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
        vector<char> flags(rows*cols,0);
        bool condition =false;
        for(int i = 0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(isPath(flags,matrix,rows,cols,str,i,j)){
                    condition = true;
                    break;
                }
            }
        }
        return condition;
    }
};